package edu.wayne.metrics.utils;

import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.CoreException;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import edu.wayne.metrics.datamodel.CodeStructureInfo;
import edu.wayne.metrics.datamodel.MetricValue;

/**
 * Parses and extracts information from the xml file generated by the metrics eclipse plugin.
 */
public class MetricsXMLUtils {
	
	// TODO: Add more code structure metrics to this array.
	// TODO: Extract constants, and explain what each one means
	// TOSUM: Added more of CS from the XML 
	private static final String[] METRIC_NAMES = { "NOC", "NOI", "DIT", "NORM" ,"NOF" ,"NSC" , "MLOC" ,"NOM" , "NBD" , "NOP" ,"VG", 
		"TLOC" ,"RMI", "PAR" ,"LCOM" , "CE" , "NSM" , "RMD" ,"RMA" ,"SIX" , "WMC" , "NSF"};
	
	
	public static void readXML(IFile file){
		if(file.exists()){
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

			DocumentBuilder builder;
			try {
				builder = factory.newDocumentBuilder();
				Document document = builder.parse(file.getContents());
				readMetrics(document);
			} catch (ParserConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		}
	}
	private static void readMetrics(Document document) {
		NodeList metrics = document.getElementsByTagName("Metric");
		for(int i = 0;i < metrics.getLength(); i++){
			Node metric = metrics.item(i);
			NamedNodeMap attributes = metric.getAttributes();
			String metricId = attributes.getNamedItem("id").getNodeValue();
			if(isRelevantMetric(metricId)){
				Node values = getValues(metric);
				if(values.getNodeName().compareTo("Values") == 0){
					addMetricValue(metricId, values);
				}
			}
		}
	}
	private static void addMetricValue(String metricId, Node values) {
		CodeStructureInfo instance = CodeStructureInfo.getInstance();
		NamedNodeMap attributes = values.getAttributes();
		
		String per = attributes.getNamedItem("per").getNodeValue();
		Double avg = Double.parseDouble(attributes.getNamedItem("avg").getNodeValue());
		Double stdDev = Double.parseDouble(attributes.getNamedItem("stddev").getNodeValue());
		Double max = Double.parseDouble(attributes.getNamedItem("max").getNodeValue());
		MetricValue value = new MetricValue(per, avg, stdDev, max);
		Node totalNode = attributes.getNamedItem("total");
		if(totalNode != null){
			value.setTotal(Integer.parseInt(totalNode.getNodeValue()));
		}
		
		instance.putMetric(metricId, value);

		
		
		
	}
	private static Node getValues(Node metric) {
		return metric.getFirstChild().getNextSibling();
	}
	private static boolean isRelevantMetric(String idNode) {
		for(String metricName: METRIC_NAMES){
			if(metricName.compareTo(idNode) == 0 ){
				return true;
			}
		}
		return false;
	}
}
